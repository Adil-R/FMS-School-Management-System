/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package Teacher;

import java.awt.KeyboardFocusManager;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.image.BufferedImage;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.event.TableModelEvent;
import javax.swing.table.TableModel;
import net.proteanit.sql.DbUtils;
import selects.QueryExamDetails;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;
import selects.QueryClassDetails;
import sqlinserts.InsertStaffPic;
import sqlupdates.UpdateStaffPic;


/**
 *
 * @author franq
 */
public class Teacher extends javax.swing.JFrame  {
    
    private static int currentSchoolID;
    private static int currentUserId;
    private ArrayList<String> classestaught;
    private ArrayList<String> subjectstaught;
    private ArrayList<String> exams;
    
    private static int classTaughtID;
    private static int subjecttaughtID;
    private static int examId;
    private static int subject_teacher_classID;
    private Action enterAction;
    private Action finishEnterAction;
    private static boolean showhint;
   
    
    public Teacher(int userid, int currentschoolid) {
          constructor(userid, currentschoolid);
          Toolkit.getDefaultToolkit().getScreenSize();
    }
    
    private void constructor(int userid, int currentschoolid)
    {
               //createa action listener for the ente button
        enterAction = new AbstractAction()
        {
        @Override
        public void actionPerformed(ActionEvent e)
        {
        KeyboardFocusManager manager = KeyboardFocusManager.getCurrentKeyboardFocusManager();
        manager.getFocusOwner().transferFocus();
        }
        };
        
         finishEnterAction = new AbstractAction() {

            @Override
            public void actionPerformed(ActionEvent e) {
                KeyboardFocusManager manager = KeyboardFocusManager.getCurrentKeyboardFocusManager();
                btnentermarksActionPerformed(e);
                        
            }
        };
        
         
         
         
        currentSchoolID = 1;
        currentUserId = userid;
        
        initComponents();
        
        this.btnprint.setEnabled(false);
        
        //get the subjects taught from the database
        classestaught = QueryExamDetails.getClassesTaught(currentUserId);
        cmbResulstsClass.setModel(new DefaultComboBoxModel(classestaught.toArray(new String[classestaught.size()])));
        
        tablesubjectclass.setEnabled(false);
        cmbResulstsSubject.setEnabled(false);
        cmbexams.setEnabled(false);
        this.setTitle("Teachers Section");
        showhint = true;
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jLabel17 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        passportpanel = new javax.swing.JPanel();
        lblpassportpic = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        logopanel = new javax.swing.JPanel();
        logopic = new javax.swing.JLabel();
        jpsubjecttaught = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablesubjectclass = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        cmbResulstsSubject = new javax.swing.JComboBox();
        cmbResulstsClass = new javax.swing.JComboBox();
        btnentermarks = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablemarksentry = new javax.swing.JTable();
        jbtsave1 = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        cmbexams = new javax.swing.JComboBox();
        jbtsave2 = new javax.swing.JButton();
        btnprint = new javax.swing.JButton();
        jScrollBar1 = new javax.swing.JScrollBar();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem5 = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem4 = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JPopupMenu.Separator();
        jMenu4 = new javax.swing.JMenu();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();
        jSeparator5 = new javax.swing.JPopupMenu.Separator();
        jMenu5 = new javax.swing.JMenu();
        jMenuItem8 = new javax.swing.JMenuItem();
        jMenuItem9 = new javax.swing.JMenuItem();
        jMenuItem10 = new javax.swing.JMenuItem();
        jMenuItem11 = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setIconImage(setIcon());

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(null, "My Profile", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(0, 0, 240)))); // NOI18N

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(0, 0, 204));
        jLabel9.setText(getUserJobTitle());

        jButton3.setText("Logout");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Exit");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jLabel17.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel17.setForeground(new java.awt.Color(0, 0, 204));
        jLabel17.setText(getUserSurname());

        jLabel22.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel22.setForeground(new java.awt.Color(0, 0, 204));
        jLabel22.setText(getUserTitle());

        passportpanel.setBackground(new java.awt.Color(255, 255, 255));
        passportpanel.setForeground(new java.awt.Color(255, 255, 255));

        lblpassportpic.setBackground(new java.awt.Color(0, 255, 255));
        lblpassportpic.setIcon(new javax.swing.ImageIcon(readImage()));
        passportpanel.add(lblpassportpic);

        jLabel23.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel23.setForeground(new java.awt.Color(0, 0, 204));
        jLabel23.setText(getSchoolName());

        logopanel.setForeground(new java.awt.Color(255, 255, 255));

        logopic.setIcon(new javax.swing.ImageIcon(readLogo()));
        logopanel.add(logopic);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(jButton3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton4)
                .addContainerGap())
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(passportpanel, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(logopanel, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(19, 19, 19))
                    .addComponent(jLabel23, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel22)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel17, javax.swing.GroupLayout.DEFAULT_SIZE, 315, Short.MAX_VALUE)
                        .addContainerGap())))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(passportpanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(logopanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(66, 66, 66)
                .addComponent(jLabel23, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel22, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(43, 43, 43)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton3)
                    .addComponent(jButton4))
                .addGap(8, 8, 8))
        );

        jpsubjecttaught.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Classes I Teach", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(0, 0, 240))); // NOI18N

        tablesubjectclass.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tablesubjectclass);

        javax.swing.GroupLayout jpsubjecttaughtLayout = new javax.swing.GroupLayout(jpsubjecttaught);
        jpsubjecttaught.setLayout(jpsubjecttaughtLayout);
        jpsubjecttaughtLayout.setHorizontalGroup(
            jpsubjecttaughtLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 459, Short.MAX_VALUE)
        );
        jpsubjecttaughtLayout.setVerticalGroup(
            jpsubjecttaughtLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpsubjecttaughtLayout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Record Exam Results", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(0, 0, 240))); // NOI18N

        jLabel4.setForeground(new java.awt.Color(0, 0, 240));
        jLabel4.setText("Class");

        jLabel5.setForeground(new java.awt.Color(0, 0, 240));
        jLabel5.setText("Subject");

        cmbResulstsSubject.setEnabled(false);
        cmbResulstsSubject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbResulstsSubjectActionPerformed(evt);
            }
        });

        cmbResulstsClass.setEnabled(true);
        cmbResulstsClass.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbResulstsClassActionPerformed(evt);
            }
        });

        btnentermarks.setText("Enter Marks");
        btnentermarks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnentermarksActionPerformed(evt);
            }
        });

        tablemarksentry.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "ID", "Surname", "First Name", "Last Name","Gender","Marks"
            }
        ));
        tablemarksentry.setCellSelectionEnabled(true);
        tablemarksentry.setEnabled(false);
        tablemarksentry.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablemarksentryMouseClicked(evt);
            }
        });
        tablemarksentry.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tablemarksentryKeyPressed(evt);
            }
        });
        jScrollPane2.setViewportView(tablemarksentry);

        jbtsave1.setText("View Record");
        jbtsave1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtsave1ActionPerformed(evt);
            }
        });

        jLabel6.setForeground(new java.awt.Color(0, 0, 240));
        jLabel6.setText("Exam");

        cmbexams.setEnabled(false);
        cmbexams.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbexamsActionPerformed(evt);
            }
        });

        jbtsave2.setText("Reset");
        jbtsave2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtsave2ActionPerformed(evt);
            }
        });

        btnprint.setText("Print Record");
        btnprint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnprintActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(jLabel4)
                        .addGap(18, 18, 18)
                        .addComponent(cmbResulstsClass, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel5)
                        .addGap(18, 18, 18)
                        .addComponent(cmbResulstsSubject, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel6)
                        .addGap(18, 18, 18)
                        .addComponent(cmbexams, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 79, Short.MAX_VALUE)
                        .addComponent(btnentermarks))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(64, 64, 64)
                .addComponent(jbtsave2)
                .addGap(212, 212, 212)
                .addComponent(btnprint)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jbtsave1)
                .addGap(55, 55, 55))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(cmbResulstsSubject, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbResulstsClass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnentermarks)
                    .addComponent(jLabel6)
                    .addComponent(cmbexams, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbtsave1)
                    .addComponent(jbtsave2)
                    .addComponent(btnprint))
                .addGap(18, 18, 18))
        );

        jMenu1.setText("File");

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F5, 0));
        jMenuItem1.setText("Refresh");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem2.setText("Log Out");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuItem3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_ESCAPE, 0));
        jMenuItem3.setText("Exit");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);
        jMenu1.add(jSeparator2);

        jMenuBar1.add(jMenu1);

        jMenu3.setText("New");

        jMenuItem5.setText("Results Entry");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem5);
        jMenu3.add(jSeparator3);

        jMenuBar1.add(jMenu3);

        jMenu2.setText("Edit");

        jMenuItem4.setText("Results");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem4);
        jMenu2.add(jSeparator4);

        jMenuBar1.add(jMenu2);

        jMenu4.setText("Exams");

        jMenuItem6.setText("View Results");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem6);

        jMenuItem7.setText("Edit Results");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem7);
        jMenu4.add(jSeparator5);

        jMenuBar1.add(jMenu4);

        jMenu5.setText("Settings");

        jMenuItem8.setText("Change Password");
        jMenuItem8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem8);

        jMenuItem9.setText("View Details");
        jMenuItem9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem9ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem9);

        jMenuItem10.setText("Set Profile Picture");
        jMenuItem10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem10ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem10);

        jMenuItem11.setText("Change Profile Picture");
        jMenuItem11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem11ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem11);
        jMenu5.add(jSeparator1);

        jMenuBar1.add(jMenu5);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jpsubjecttaught, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 9, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jpsubjecttaught, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(20, 20, 20))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        int confirm = JOptionPane.showConfirmDialog(null, "You are About to Exit The System\n" +
                        "", "Confirm", JOptionPane.OK_CANCEL_OPTION);
        if(confirm == JOptionPane.OK_OPTION)
        {
        System.exit(0);
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void btnentermarksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnentermarksActionPerformed
        // TODO add your handling code here:
        updateMarksEntryTable();
        tablemarksentry.setEnabled(true);
        this.btnprint.setEnabled(false);
         if(showhint==true)
        {
         JOptionPane.showMessageDialog(null,
                "To Enter Student Marks, Key in The Specific Marks Then Click Enter Twice To Save.\n\n"+
                "Its Also Recomended to Click The View Records Button to Confirm Whether the Marks \nWere Saved Before Proceeding.","Information",JOptionPane.INFORMATION_MESSAGE);
         showhint = false;
        }

        
    }//GEN-LAST:event_btnentermarksActionPerformed

    private void jbtsave1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtsave1ActionPerformed
        updateMarksEntryTable();
        tablemarksentry.setEnabled(true);
        this.btnprint.setEnabled(true);
    }//GEN-LAST:event_jbtsave1ActionPerformed

    
      
    
    
    private void saveChangeAt(int row)
    {
         double val = Double.parseDouble(tablemarksentry.getValueAt(row, 5).toString());
        int id = Integer.parseInt(tablemarksentry.getValueAt(row, 0).toString());
        double mark = val;
        try {
            //calls the entermarks function to save
            sqlinserts.MarksEntry.EnterMarks(examId, id, classTaughtID, subjecttaughtID, subject_teacher_classID, mark, id);
            double oldmark = selects.QueryExamResults.getOldTotal(examId, id, classTaughtID);
            double newmark = mark + oldmark;
            //update total mark
            sqlupdates.ExamTotalMarksInfo.updateTotalMark(examId, id, classTaughtID, newmark);
            
        } catch (SQLException ex) {
            Logger.getLogger(Teacher.class.getName()).log(Level.SEVERE, null, ex);
             if(ex.getErrorCode() == 1062)
                {
                    JOptionPane.showMessageDialog(null, "It Seems Marks For This Exam Have Been Recorded Already\n"
                            + "Click Edit To Update", "Warning "+ex.getErrorCode(), JOptionPane.WARNING_MESSAGE);
                }
             else
            JOptionPane.showMessageDialog(null,
                "Some unexpected error occured\n"+
                "Marks have not been saved\n"+
                "Please Contact System Admin for Assistance","Error Message",JOptionPane.ERROR_MESSAGE);
        }
    
    }
    
    private void cmbResulstsClassActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbResulstsClassActionPerformed
        // TODO add your handling code here:
        String classname = cmbResulstsClass.getSelectedItem().toString();
        try {
            selects.QueryClassDetails.getClassNames();
            int classTaughtIDid = QueryClassDetails.listofnames.indexOf(classname);
            classTaughtID = Integer.parseInt(QueryClassDetails.listofids.get(classTaughtIDid).toString());
            
            subjectstaught = QueryExamDetails.getSubjectTaught(currentUserId,classTaughtID);
            cmbResulstsSubject.setModel(new DefaultComboBoxModel(subjectstaught.toArray(new String[subjectstaught.size()])));
            cmbResulstsSubject.setEnabled(true);
            cmbResulstsClass.addActionListener(enterAction);
        } catch (Exception ex) {
           JOptionPane.showMessageDialog(null,
                "Some unexpected error occured\n"+
                "Was not able to load Subject name details\n"+
                "Please Select Class  First","Error Message",JOptionPane.ERROR_MESSAGE);
           cmbResulstsSubject.setEnabled(false);
           cmbexams.setEnabled(false);
        }
        
        
    }//GEN-LAST:event_cmbResulstsClassActionPerformed

    private void cmbResulstsSubjectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbResulstsSubjectActionPerformed
        // TODO add your handling code here:
        String subjectname = cmbResulstsSubject.getSelectedItem().toString().toUpperCase();
        try {
           
            int subjecttaughtIDid = selects.QueryExamDetails.subjecttaughtnames.indexOf(subjectname);
            subjecttaughtID = Integer.parseInt(selects.QueryExamDetails.subjecttaughtids.get(subjecttaughtIDid).toString());
            exams = QueryExamDetails.getExamDetails();
            cmbexams.setEnabled(true);
            cmbexams.setModel(new DefaultComboBoxModel(exams.toArray(new String[exams.size()])));
            
            
        } catch (Exception ex) {
        Logger.getLogger(Teacher.class.getName()).log(Level.SEVERE, null, ex);
        JOptionPane.showMessageDialog(null,
                "Some unexpected error occured\n"+
                "Was not able to load Exam Details\n"+
                "Please Select Subject Details first","Error Message",JOptionPane.ERROR_MESSAGE);
                cmbexams.setEnabled(false);
        }
    }//GEN-LAST:event_cmbResulstsSubjectActionPerformed

    private void cmbexamsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbexamsActionPerformed
        // TODO add your handling code here:
        try {
             examId = QueryExamDetails.getExamID(cmbexams.getSelectedItem().toString());
             cmbexams.addActionListener(finishEnterAction);
        } catch (SQLException ex) {
            Logger.getLogger(Teacher.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null,
                "Some unexpected error occured\n"+
                "Was not able to load Exam Details\n"+
                "Please Contact System Admin for Assistance","Error Message",JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_cmbexamsActionPerformed

    private void tablemarksentryKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tablemarksentryKeyPressed
        int row = tablemarksentry.getSelectedRow();
        double val = Double.parseDouble(tablemarksentry.getValueAt(row, 5).toString());
        int id = Integer.parseInt(tablemarksentry.getValueAt(row, 0).toString());
        double mark = val;
        try {
            //calls the entermarks function to save
            sqlinserts.MarksEntry.EnterMarks(examId, id, classTaughtID, subjecttaughtID, subject_teacher_classID, mark, id);
            double oldmark = selects.QueryExamResults.getOldTotal(examId, id, classTaughtID);
            double newmark = mark + oldmark;
            //update total mark
            sqlupdates.ExamTotalMarksInfo.updateTotalMark(examId, id, classTaughtID, newmark);
            
        } catch (SQLException ex) {
            Logger.getLogger(Teacher.class.getName()).log(Level.SEVERE, null, ex);
             if(ex.getErrorCode() == 1062)
                {
                    JOptionPane.showMessageDialog(null, "It Seems Marks For This Exam Have Been Recorded Already\n"
                            + "Click Edit To Update", "Warning "+ex.getErrorCode(), JOptionPane.WARNING_MESSAGE);
                }
             else
            JOptionPane.showMessageDialog(null,
                "Some unexpected error occured\n"+
                "Marks have not been saved\n"+
                "Please Contact System Admin for Assistance","Error Message",JOptionPane.ERROR_MESSAGE);
        }
        
    }//GEN-LAST:event_tablemarksentryKeyPressed

    private void tablemarksentryMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablemarksentryMouseClicked

    }//GEN-LAST:event_tablemarksentryMouseClicked

    private void jbtsave2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtsave2ActionPerformed
        this.reset();
    }//GEN-LAST:event_jbtsave2ActionPerformed

    private  void reset()
    {
        this.cmbResulstsSubject.setEnabled(false);
        this.tablemarksentry.setEnabled(false);
        this.cmbexams.setEnabled(false);
        this.cmbResulstsClass.setSelectedIndex(0);
        
        tablemarksentry.setModel(new javax.swing.table.DefaultTableModel(
    new Object [][] {
        {null, null, null, null},
        {null, null, null, null},
        {null, null, null, null},
        {null, null, null, null},
        {null, null, null, null},
        {null, null, null, null},
        {null, null, null, null},
        {null, null, null, null},
        {null, null, null, null},
        {null, null, null, null}
    },
    new String [] {
        "ID", "Surname", "First Name", "Last Name","Gender","Marks"
    }
));
}
    
    private void btnprintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnprintActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnprintActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        //logout
        main.LogOut.LogOut(this);
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
       int confirm = JOptionPane.showConfirmDialog(null, "You are About to Exit The System\n" +
                        "", "Confirm", JOptionPane.OK_CANCEL_OPTION);
        if(confirm == JOptionPane.OK_OPTION)
        {
        System.exit(0);
        }
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
       //calls the logout function
      main.LogOut.LogOut(this);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        this.reset();
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
      ResultsEntry results = new ResultsEntry(currentUserId);
      results.main(new String[9]);
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        EditMarks editmarks = new EditMarks(currentUserId);
        editmarks.main(new String[9]);
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        ViewResults view = new ViewResults(currentUserId);
        view.main(new String[9]);
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
       EditMarks editmarks = new EditMarks(currentUserId);
       editmarks.main(new String[9]);
    }//GEN-LAST:event_jMenuItem7ActionPerformed

    private void jMenuItem10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem10ActionPerformed
        // TODO add your handling code here:
        try {
        InsertStaffPic ins = new InsertStaffPic(currentUserId);
        }
        catch(SQLException ex)
        {
            ex.printStackTrace();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Teacher.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItem10ActionPerformed

    private void jMenuItem8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem8ActionPerformed
         // TODO add your handling code here:
        main.ChangePassword changePassword = new main.ChangePassword(currentUserId);
        changePassword.main(new String[9]);
    }//GEN-LAST:event_jMenuItem8ActionPerformed

    private void jMenuItem11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem11ActionPerformed
        try {
          UpdateStaffPic updateStaffPic = new UpdateStaffPic(currentUserId);
          this.updateProfile();
        }
        catch(SQLException ex)
        {
            ex.printStackTrace();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Teacher.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItem11ActionPerformed

    private void jMenuItem9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem9ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem9ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Teacher.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Teacher.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Teacher.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Teacher.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Teacher(currentUserId,currentSchoolID).setVisible(true);
                updateSubjectsTaughtTable();
            }
        });
    }
    
    public  void updateProfile(){
        //update the profile pic
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                lblpassportpic.setIcon(new javax.swing.ImageIcon(readImage()));
                passportpanel.add(lblpassportpic);

            }
        });
    }
    
    
     //iimage reader function
    private BufferedImage readImage()
    {
        DBConnection dbconn =new DBConnection();
        Connection conn = dbconn.vconnection;
        PreparedStatement pstmt;
        String sql = "SELECT `passport` FROM `staff_passport` WHERE `staffID` = ?";
        
        BufferedImage bufImg = null;
        try {
            pstmt = conn.prepareStatement(sql);
            //should get the id of the current user and give it to 1
            pstmt.setInt(1, currentUserId);
            ResultSet rs = pstmt.executeQuery();
            
            rs.next();
            InputStream in = rs.getBinaryStream("passport"); 
             bufImg = ImageIO.read(in); 
        } catch (SQLException ex) {
            Logger.getLogger(Teacher.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Teacher.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        return bufImg;
    }
    private BufferedImage setIcon()
    {
        DBConnection dbconn =new DBConnection();
        Connection conn = dbconn.vconnection;
        PreparedStatement pstmt;
        String sql = "SELECT `icon` FROM `icon` WHERE 1 LIMIT 1";
        
        BufferedImage bufImg = null;
        try {
            pstmt = conn.prepareStatement(sql);
            //should get the id of the current user and give it to 1
            ResultSet rs = pstmt.executeQuery();
            
            rs.next();
            InputStream in = rs.getBinaryStream("icon"); 
             bufImg = ImageIO.read(in); 
        } catch (SQLException ex) {
            Logger.getLogger(Teacher.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Teacher.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        return bufImg;
    }
    
    
     private static String getSchoolName()
    {
        DBConnection dbconn =new DBConnection();
        Connection conn = dbconn.vconnection;
        PreparedStatement pstmt;
        String schoolname= "";
        String sql = "SELECT `Name` FROM `school_details` WHERE `ID` = ?";
        try {
            pstmt = conn.prepareStatement(sql);
            pstmt.setInt(1, currentSchoolID);
            ResultSet rs = pstmt.executeQuery();
            rs.next();
            schoolname = rs.getString("Name");
            
        
        } catch (SQLException ex) {
            Logger.getLogger(Teacher.class.getName()).log(Level.SEVERE, null, ex);
             JOptionPane.showMessageDialog(null, "Some unexpected error occured \nSchool Name Details not found\n" +
                        "Please contact the system administrator", "Error "+ex.getErrorCode(), JOptionPane.INFORMATION_MESSAGE);
        }
        return schoolname;
    }
      
       private String getUserTitle()
    {
        DBConnection dbconn =new DBConnection();
        Connection conn = dbconn.vconnection;
        PreparedStatement pstmt;
        String userTitle= "";
        String sql = "SELECT `Title` FROM `staff` WHERE `ID` = ?";
        try {
            pstmt = conn.prepareStatement(sql);
            pstmt.setInt(1, currentUserId);
            ResultSet rs = pstmt.executeQuery();
            rs.next();
            userTitle = rs.getString("Title");
            
        
        } catch (SQLException ex) {
            Logger.getLogger(Teacher.class.getName()).log(Level.SEVERE, null, ex);
             JOptionPane.showMessageDialog(null, "Some unexpected error occured \n User Details not found\n" +
                        "Please contact the system administrator", "Error "+ex.getErrorCode(), JOptionPane.INFORMATION_MESSAGE);
        }
        return userTitle;
    }
       
          private String getUserSurname()
    {
        DBConnection dbconn =new DBConnection();
        Connection conn = dbconn.vconnection;
        PreparedStatement pstmt;
        String userTitl= "";
        String sql = "SELECT `Surname`,`First Name` FROM `staff` WHERE `ID` = ?";
        try {
            pstmt = conn.prepareStatement(sql);
            pstmt.setInt(1, currentUserId);
            ResultSet rs = pstmt.executeQuery();
            rs.next();
            userTitl = rs.getString("Surname")+" "+rs.getString("First Name");
            
            
        
        } catch (SQLException ex) {
            Logger.getLogger(Teacher.class.getName()).log(Level.SEVERE, null, ex);
             JOptionPane.showMessageDialog(null, "Some unexpected error occured \n User Details not found\n" +
                        "Please contact the system administrator", "Error "+ex.getErrorCode(), JOptionPane.INFORMATION_MESSAGE);
        }
        return userTitl;
    }
      private String getUserJobTitle()
    {
        DBConnection dbconn =new DBConnection();
        Connection conn = dbconn.vconnection;
        PreparedStatement pstmt;
        String userTitl= "";
        String sql = "SELECT `Job Title` FROM `staff` WHERE `ID` = ?";
        try {
            pstmt = conn.prepareStatement(sql);
            pstmt.setInt(1, currentUserId);
            ResultSet rs = pstmt.executeQuery();
            rs.next();
            userTitl = rs.getString("Job Title");
            
        
        } catch (SQLException ex) {
            Logger.getLogger(Teacher.class.getName()).log(Level.SEVERE, null, ex);
             JOptionPane.showMessageDialog(null, "Some unexpected error occured \n User Details not found\n" +
                        "Please contact the system administrator", "Error "+ex.getErrorCode(), JOptionPane.INFORMATION_MESSAGE);
        }
        return userTitl;
    }
      
       //update table 
    private  static void updateSubjectsTaughtTable()
    {
            DBConnection dbconn =new DBConnection();
            Connection conn = dbconn.vconnection;
            PreparedStatement pstmt;
            ResultSet rs;
            String Sql = "SELECT  `class`.`Level`,`class`.`Class` ,  `subject`.`Subject` " +
                          "FROM  `class` ,  `subject`" +
                          "INNER JOIN  `subject_teacher_class` ON 1 " +
                          "WHERE  `subject_teacher_class`.`staffID` =? " +
                          "AND  `subject_teacher_class`.`classID` =  `class`.`ID` " +
                          "AND  `subject_teacher_class`.`subjectID` =  `subject`.`ID`";
        try {
            pstmt = conn.prepareStatement(Sql);
            pstmt.setInt(1,currentUserId);
            rs = pstmt.executeQuery();
            tablesubjectclass.setModel(DbUtils.resultSetToTableModel(rs));
            
        } catch (SQLException ex) {
            Logger.getLogger(Teacher.class.getName()).log(Level.SEVERE, null, ex);
        }
           
    }
    
     
       //update table 
    private static void updateMarksEntryTable()
    {
            DBConnection dbconn =new DBConnection();
            Connection conn = dbconn.vconnection;
            PreparedStatement pstmt;
            subject_teacher_classID = selects.QuerySubjectClassTeacher.getClass_TeacherID(subjecttaughtID,  currentUserId, classTaughtID);
            ResultSet rs;
            String Sql= "SELECT  `student`.`ID` ,  `student`.`surname` ,  `student`.`First Name` ,  `student`.`Last Name` ,  `student`.`Gender` \n" +
                        "FROM  `student` \n" +
                        "INNER JOIN  `exam_result` \n" +
                        "ON    `student`.`classID` =? "
                    +   "AND `exam_result`.`classID`=? \n" +
                        "AND  `exam_result`.`examID` =? \n" +
                        "AND  `exam_result`.`Activate` = \n" +
                        "TRUE "+
                        "ORDER BY  `ID`;";
        try {
            pstmt = conn.prepareStatement(Sql);
            pstmt.setInt(1, classTaughtID);
            pstmt.setInt(2, classTaughtID);
            pstmt.setInt(3, examId);
           
            
             
            
            rs = pstmt.executeQuery();
            TableModel mod = DbUtils.resultSetToTableModel(rs);
            DefaultTableModel model = new DefaultTableModel();
            model = (DefaultTableModel) mod;
            model.addColumn("Marks");
            tablemarksentry.setModel(model);
            
        } catch (SQLException ex) {
            Logger.getLogger(Teacher.class.getName()).log(Level.SEVERE, null, ex);
        }
           
    }
    
    
     private static BufferedImage readLogo()
    {
        DBConnection dbconn =new DBConnection();
        Connection conn = dbconn.vconnection;
        PreparedStatement pstmt;
        String sql = "SELECT `logo` FROM `syslogo` WHERE 1";
        
        BufferedImage bufImg = null;
        try {
            pstmt = conn.prepareStatement(sql);
            //should get the id of the current user and give it to 1
            
            ResultSet rs = pstmt.executeQuery();
            
            rs.next();
            InputStream in = rs.getBinaryStream("logo"); 
             bufImg = ImageIO.read(in); 
        } catch (SQLException ex) {
            Logger.getLogger(Teacher.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Teacher.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        return bufImg;
    }
   
    
      
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnentermarks;
    private javax.swing.JButton btnprint;
    private javax.swing.JComboBox cmbResulstsClass;
    private javax.swing.JComboBox cmbResulstsSubject;
    private javax.swing.JComboBox cmbexams;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem10;
    private javax.swing.JMenuItem jMenuItem11;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JMenuItem jMenuItem9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollBar jScrollBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JPopupMenu.Separator jSeparator4;
    private javax.swing.JPopupMenu.Separator jSeparator5;
    private javax.swing.JButton jbtsave1;
    private javax.swing.JButton jbtsave2;
    private javax.swing.JPanel jpsubjecttaught;
    private javax.swing.JLabel lblpassportpic;
    private javax.swing.JPanel logopanel;
    private javax.swing.JLabel logopic;
    private javax.swing.JPanel passportpanel;
    private static javax.swing.JTable tablemarksentry;
    private static javax.swing.JTable tablesubjectclass;
    // End of variables declaration//GEN-END:variables
}
